
SORTING
Pengurutan atau “Sorting“ adalah suatu proses menyusun kembali data yang sebelumnya telah disusun dengan suatu pola tertentu, sehingga tersusun secara teratur menurut aturan tertentu ( untuk data yang bertipe numerik atau karakter).
Dua Macam Pengurutan
Ø  Ascending (urut naik) merupakan pengurutan dari angka yang nilainya lebih kecil kemudian menuju ke nilainya yang lebih besar.
Ø  Descending (urut turun) adalah sebaliknya, yaitu pengurutan dari nilainya yang lebih besar kemudian menuju ke nilainya yang lebih kecil.

1. Bubble Sort
Memindahkan element sekarang dengan elemen berikutnya , jika elemen sekarang itu lebih besar / lebih kecil dari elemen berikutnya maka di tukar (berpindah posisi).
contoh:
lst = [5,0,1,10,7,2,5,4,6,9]
print(lst)
for k in range(1,len(lst)):
    for i in range(0,len(lst)-1):
        if lst[i]>lst[i+1]:
            lst[i],lst[i+1] = lst[i+1],lst[i]
print(lst)


2. Selection Sort 
Memindahkan elemen dengan cara membandingkan elemen sekarang dengan elemen yang berikutnya sampai dengan elemen terakhir . Jika ditemukan elemen lain yang lebih kecil / lebih besar dari elemen sekarang maka dicatat posisinya dan kemudian ditukar dan begitu seterusnya. 
contoh:
lst = [4,7,1,9,3,10,6]
print(lst)
for i in range(0,len(lst)-1):
    min=i
    for j in range(i+1,len(lst)):
        if lst[j]<lst[min]:
            min = j

    lst[i],lst[min]=lst[min],lst[i]
print(lst)


3. Insertion Sort
Pengurutan yang dilakukan dengan cara membandingkan dengan data ke-2 sampai data terakhir. Jika ditemukan data yang lebih kecil atau lebih besar maka data tersebut disisipkan kedepan sesuai posisi yang seharusnya.
contoh:
lst = [4,7,1,0]

for i in range(1,len(lst)):
    nilaiawal = lst[ i]
    hole = i
    while lst[hole-1] > nilaiawal and hole > 0   :
        lst[hole] = lst[hole-1]
        hole=hole-1

    lst[hole] = nilaiawal

print(lst)

4. Quick Sort
Merupakan proses penyusunan elemen yang membandingkan suatu elemen (pivot) denan elemen yang lain, dan menyusunnya sedemikian rupa sehingga elemen –elemen lain yang lebih kecil dari pivot terletak disebelah kiri pivot. Dan elemen yang lebih besar dari pivot terletak disebelah kanan pivot.
Dengan demikian akan terbentuk dua sublist, yang terletak disebelah kanan dan kiri pivot. Lalu pada sublist kiri dan kanan itu kita anggap sebuah list baru, dan kita kerjakan proses yang sama seperti yang sebelumnya. Demikian seterusnya sampai tidak terdapat sublist lagi.
contoh:
def Partition(A,start,end):
    pivot = A[end]
    pIndex = start
    for i in range(start,end):
        if (A[i] <= pivot):
            A[i],A[pIndex]=A[pIndex],A[i]
            pIndex=pIndex+1
    A[pIndex],A[end]=A[end],A[pIndex]
    return pIndex
    
contoh lain : 
def QuickSortAwal(A):
    QuickSort(A,0,len(A)-1)

def QuickSort(A,start,end):
    if start<end:
        pIndex = Partition(A,start,end)
        QuickSort (A,start,pIndex-1)
        QuickSort (A,pIndex+1,end)

def Partition(A,start,end):
    pivot = A[end]
    pIndex = start
    for i in range(start,end):
        if (A[i] <= pivot):
            A[i],A[pIndex]=A[pIndex],A[i]
            pIndex=pIndex+1
    A[pIndex],A[end]=A[end],A[pIndex]
    return pIndex

A=[100,6,500,4,56,2,1,0]
QuickSortAwal(A)
print(A)

5. Merge Sort 
algoritma membagi array input dalam dua bagian, memanggil dirinya untuk dua bagian dan kemudian menggabungkan dua bagian yang diurutkan. Fungsi gabungan () digunakan untuk menggabungkan dua bagian.
contoh:
def MergedSort(A):
    n = len(A)
    if (n<2):
       return
    mid = len(A)//2
    left = A[:mid]
    right = A[mid:]
    MergedSort(left)
    MergedSort(right)
    i=0
    j=0
    k=0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            A[k]=left[i]
            i=i+1
        else:
            A[k]=right[j]
            j=j+1
        k=k+1

    while i < len(left):
        A[k]=left[i]
        i=i+1
        k=k+1

    while j < len(right):
        A[k]=right[j]
        j=j+1
        k=k+1

Alist= [54,26,93,17,99,77,31,44,55,20,100]
MergedSort(Alist)
print(Alist)

6. Shell Sort
Hal ini dapat dilihat sebagai penyortirran dengan pertukaran (bubble sort) atau penyortiran dengan penyisipan (insertion sort). Metode ini dimulai dengan menyortir pasangan elemen yang berjauhan satu sama lain, kemudian secara progresif mengurangi kesenjangan antara elemen yang akan dibandingkan. Dimulai dengan elemen berjauhan, ia dapat memindahkan beberapa elemen out-of-place ke posisi lebih cepat dari pertukaran tetangga terdekat yang sederhana.
contoh:
def shellSort(alist):
    sublistcount = len(alist)//2
    while sublistcount > 0:

      for startposition in range(sublistcount):
        print(sublistcount)
        gapInsertionSort(alist,startposition,sublistcount)
      sublistcount = sublistcount // 2

def gapInsertionSort(alist,start,gap):
    for i in range(start+gap,len(alist),gap):

        currentvalue = alist[i]
        position = i

        while position>=gap and alist[position-gap]>currentvalue:
            alist[position]=alist[position-gap]
            position = position-gap

        alist[position]=currentvalue
        print(alist)
        


alist = [35,33,42,10,14,19,27,44]
print(alist)
shellSort(alist)
print(alist)